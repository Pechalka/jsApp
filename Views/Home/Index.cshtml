@{
    Layout = null;
}

<!DOCTYPE html>

@helper GetTemplate(string templateId)
{
    @Html.Action("GetTemplate", "Templates", new { templateId })
}

<html>
<head>
    <title>Index</title>

    <style type="text/css">
        .active {
            background-color: red;
        }
    </style>
    <script src="@Url.Content("~/Scripts/jquery-1.8.2.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/knockout-2.1.0.js")" type="text/javascript"></script>
    <script src="@Url.Content("~/Scripts/sammy/sammy.min.js")" type="text/javascript"></script>

    <script type="text/javascript">
        //todo:
        // lazy loading for templates +
        // bot call layout vm is layout not change
        // refactoring  start method +
        // static html +

        var app = $.sammy(function () {
            var self = this;

            self.screens = [];
            self.registerScreen = function (screen) {
                self.screens.push(screen);
            };

            self.content = ko.observable(null);


            function _init(screen, responseData) {
                var layout = screen.layout,
                    layoutData = { };

                if (layout && layout.viewModel) //if screen have layout with custom vm, creates it, else vm for layout empty object
                    layoutData = new layout.viewModel(responseData);

                var screenData = responseData || {}; // base vm for screen if data is from request or empty object
                if (screen.viewModel)//if screen have vm create it, sent response data and vm layout in screen for init
                    $.extend(screenData, new screen.viewModel(responseData, layoutData));

                _loadTemplate(screen.template); //load template 
                var screenSection = {
                    templateName: screen.template,
                    data: screenData
                };
                
                if (layout) {//if screen has layout
                    layoutData.content = ko.observable(screenSection); // layout vm should contain content observable, for render screen inside
                        _loadTemplate(layout.template); //load template 
                    
                    return {
                        templateName: layout.template,
                        data: layoutData
                    };
                    
                } else {
                    return screenSection;
                }
            };

            function _loadTemplate(templateId) {
                if ($('#' + templateId).length == 0) {
                    $.ajax({//https://groups.google.com/forum/?fromgroups=#!topic/knockoutjs/_YJwSs5ZwaE todo: Deferred, timeout
                        url: '@Url.Action("GetTemplate", "Templates")',
                        async: false, //!!!
                        dataType: "html",
                        data: { templateId: templateId },
                        type: "GET",
                        success: function (template) { $("body").append(template); }
                    });
                }
            };

            self.start = function () {

                var routers = [];
                $.map(self.screens, function (screen) {
                    var action = function () {
                        if (screen.dataUrl) {
                            $.get(screen.dataUrl, this.params.toHash(), function (responseData) {
                                var page = _init(screen, responseData);
                                self.content(page);
                            });
                        } else {
                            var page = _init(screen, null);
                            self.content(page);
                        }
                    };
                    routers.push(['get', screen.hash, action]);
                });

                self.mapRoutes(routers);
                self.run();
                ko.applyBindings(self);
            };


        });

        var Layout = function (templateName, viewModel) {
            this.template = templateName;
            this.viewModel = viewModel;
        };

        $(function () {
            var baseLayout = new Layout('_baseLayout');
            var catalogLayout = new Layout('_catalogLayout', function () {
                var self = this;
                self.catalogMenu = ko.observableArray([]);
                self.selectedItem = ko.observable('#templates');
                $.get('@Url.Action("GetMenu")', '', function (data) {
                    self.catalogMenu(data.items);
                });
            });

            app.registerScreen({
                dataUrl: '@Url.Action("GetMenu")',
                hash: '/?',
                layout: baseLayout,
                template: "dashbord"
            });
            app.registerScreen({
                dataUrl: '@Url.Action("GetTemplatets")',
                hash: '/?#templates',
                layout: catalogLayout,
                template: "templateList",
                viewModel: function (data, layout) {
                    var self = this;
                    layout.selectedItem('#templates');
                    self.goToEdit = function (item) {
                        location.hash = '#templates/' + item.Id;
                    };
                }
            });
            app.registerScreen({
                dataUrl: '@Url.Action("GetTemplate")',
                hash: '/?#templates/:id',
                layout: catalogLayout,
                template: "templateEdit",
                viewModel: function (data, layout) {
                    layout.selectedItem('#templates');
                }
            });

            app.registerScreen({
                dataUrl: '@Url.Action("GettestData")',
                hash: '/?#test',
                template: "test"
            });

            app.registerScreen({
                dataUrl: '@Url.Action("GetMediaBoxData")',
                hash: '/?#mediaboxsetup',
                layout: catalogLayout,
                template: "mediaboxsetup",
                viewModel: function (data, layout) {
                    layout.selectedItem('#mediaboxsetup');
                }
            });

            app.registerScreen({
                hash: '/?#staticHtml',
                template: "statichtml",
                viewModel: function () {
                    this.age = 12;
                }
            });
            app.start();
        });
    </script>
</head>
<body>
<!-- ko with : content -->
    <!-- ko template: { name: templateName, data: data } -->
    <!-- /ko -->
<!-- /ko -->
</body>
</html>
